// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;           // current length of this string
    field int maximumLength;
    field Array chars;          // holds actual characters of string

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }

        let maximumLength = maxLength;
        let length = 0;
        let chars = Array.new(maxLength);

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        // compiler decides this is an array and does the work for me
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maximumLength) {
            let chars[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }

        return;
    }
    
    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sum, i, d;
        var boolean neg;

        if ((length > 0) & (chars[0] = 45)) {   // first char is '-'
            let neg = true;
            let i = 1;
        } 
        else {
            let neg = false;
            let i = 0;
        }

        while ((i < length) & String.isDigit(chars[i])) {
            let d = String.charToDigit(chars[i]);
            let sum = sum * 10 + d;

            let i = i + 1;
        }

        return sum;
    }

    function boolean isDigit(char c) {
        return (c > 47) & (c < 58);     // 48 - 57 are digits
    }

    function int charToDigit(char c) {
        return c - 48;                  // 48 => 0
    }

    function char digitToChar(int d) {
        return d + 48;
    }


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;             // reset the string to empty

        if (val < 0) {
            let val = -val;
            do appendChar(45);      // add '-' in front
        }

        do int2String(val);

        return;
    }

    method void int2String(int n) {
        var int lastDigit;
        var int nextNumber;

        let nextNumber = Math.divide(n, 10);    // 59/10 = 5
        let lastDigit = n - nextNumber * 10;    // 59 - 5*10 = 9
        
        if (n < 10) {
            do appendChar(String.digitToChar(n));
        }
        else {
            do int2String(nextNumber);
            do appendChar(String.digitToChar(lastDigit));
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
