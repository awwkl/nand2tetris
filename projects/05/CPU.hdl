// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 0xxx xxxx xxxx xxxx (A-instruction)
    // 111a cccc ccdd djjj (C-instruction)

    ALU(x=outD, y=outMuxAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zr, ng=ng);

    // storing in DRegister. first check if D is to be loaded (i.e. C-instruction AND present bit to load D)
    And(a=instruction[15], b=instruction[4], out=loadD); // load DRegister iff is C-instruction AND store in register D
    DRegister(in=outALU, load=loadD, out=outD);

    // storing in ARegister. if A-instruction, store instruction value directly into ARegister
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMuxA);    // if sel == 0, pass A-instruction to ARegister
    Not(in=instruction[15], out=isAInstruction);    // isAInstruction if instruction[15] == 0
    Or(a=isAInstruction, b=instruction[5], out=loadA);  // is A-instruction OR store in register A
    ARegister(in=outMuxA, load=loadA, out=outA, out[0..14]=addressM);

    // choosing between A or M to load INTO ALU for computation
    Mux16(a=outA, b=inM, sel=instruction[12], out=outMuxAM);    // if sel == 0, use A, else use M

    // flags for if outALU is zero, negative, positive
    Or(a=zr, b=ng, out=zeroOrNegative);         // zeroOrNegative if outALU <= 0
    Not(in=zeroOrNegative, out=positiveOut);    // positiveOut if outALU > 0

    // in order to Jump, need both the jump instruction bit and for the outALU to fulfill the requirement
    And(a=positiveOut, b=instruction[0], out=jumpPositive);     // (positiveOut == 1) AND (j0 == 1)
    And(a=zr, b=instruction[1], out=jumpEqual);                 // (zr flag == 1) AND (j1 == 1)
    And(a=ng, b=instruction[2], out=jumpNegative);              // (ng flag == 1) AND (j2 == 1)
    Or(a=jumpPositive, b=jumpEqual, out=jumpPositiveOrEqual);
    Or(a=jumpPositiveOrEqual, b=jumpNegative, out=jumpCompare); // jumpLoad if (jumpPositive OR jumpEqual OR jumpNegative)
    And(a=instruction[15], b=jumpCompare, out=jumpLoad);        // only jump IF is C-instruction. NEVER jump if A-instruction

    // if jump, take value of ARegister and give it to PC
    PC(in=outA, load=jumpLoad, inc=true, reset=reset, out=outPC, out[0..14]=pc);

    // writeM = 1 if (store M bit and is C-instruction)
    And(a=instruction[15], b=instruction[3], out=writeM);
}